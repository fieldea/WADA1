{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","increment","fetch","then","response","console","log","json","data","xdata","ydata","length","i","push","Year","Temp","reverse","setState","seriesData","state","initBarEcharts","bind","myChart","echarts","init","document","getElementById","options","title","text","tooltip","xAxis","name","this","yAxis","series","type","smooth","setOption","style","color","className","onClick","id","width","height","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yRA4FeA,G,uEAhFX,WAAYC,GAAQ,IAAD,8BAEjB,cAAMA,IAsCRC,UAAY,WAEVC,MADe,kCAEdC,MAAK,SAAAC,GAIJ,OAHAC,QAAQC,IAAIF,EAASG,MAEXH,EAASG,UAGpBJ,MAAK,SAAAK,GACJ,IAAMC,EAAQ,GACRC,EAAQ,GACd,GAAIF,EAAKG,OAAS,GAChB,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACtBH,EAAMI,KAAKL,EAAKI,GAAGE,MACnBJ,EAAMG,KAAKL,EAAKI,GAAGG,MAGvBN,EAAMO,UACNN,EAAMM,UACNX,QAAQC,IAAI,wBAAyB,kBACrCD,QAAQC,IAAIE,GACZH,QAAQC,IAAIG,GACZJ,QAAQC,IAAII,GACZ,EAAKO,SAAS,CACdT,KAAMC,EACNS,WAAYR,QA7Dd,EAAKS,MAAM,CACLX,KAAK,GACLU,WAAW,IAEf,EAAKE,eAAkB,EAAKA,eAAeC,KAApB,gBATR,E,6DAaf,IAAIC,EAAUC,IAAQC,KAAKC,SAASC,eAAe,SAC/CC,EAAU,CACVC,MAAO,CAAEC,KAAM,WACfC,QAAS,GACTC,MAAO,CACHC,KAAM,OACNxB,KAAMyB,KAAKd,MAAMX,MAErB0B,MAAO,GACPC,OAAQ,CAAC,CACLH,KAAM,OACNI,KAAM,OACNC,QAAQ,EACR7B,KAAMyB,KAAKd,MAAMD,cAGzBI,EAAQgB,UAAUX,GAAQ,K,0CAG1BM,KAAKb,mB,0FAMLa,KAAKb,mB,+BAiCL,OACI,6BACE,4BAAQmB,MAAO,CAACC,MAAO,WAAYC,UAAU,gBAAgBC,QAAST,KAAKhC,WAA3E,YACA,yBAAK0C,GAAG,OAAOJ,MAAO,CAAEK,MAAO,IAAKC,OAAQ,Y,GA3ExCC,cCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7B,SAASC,eAAe,SDyHpB,kBAAmB6B,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxD,QAAQwD,MAAMA,EAAMC,c","file":"static/js/main.e95126f3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n// 引入 ECharts 主模块\r\nimport echarts from 'echarts/lib/echarts';\r\n// 引入柱状图\r\nimport  'echarts/lib/chart/line';\r\n// 引入提示框和标题组件\r\nimport 'echarts/lib/component/tooltip';\r\nimport 'echarts/lib/component/title';\r\n\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n    // Need to remember to call the parent constructor.\r\n      super(props)\r\n\r\n    // We create a state object and set our initial state in it\r\n      this.state={\r\n            data:[ ],\r\n            seriesData:[ ]\r\n        };\r\n        this.initBarEcharts  = this.initBarEcharts.bind(this);\r\n  }\r\n\r\n    initBarEcharts(){\r\n        let myChart = echarts.init(document.getElementById('main'));\r\n        let options = {\r\n            title: { text: 'ECharts' },\r\n            tooltip: {},\r\n            xAxis: {\r\n                name: 'Year',\r\n                data: this.state.data\r\n            },\r\n            yAxis: {},\r\n            series: [{\r\n                name: 'Temp',\r\n                type: 'line',\r\n                smooth: true,\r\n                data: this.state.seriesData\r\n            }]\r\n        };\r\n        myChart.setOption(options,true)\r\n    }\r\n    componentDidMount() {\r\n        this.initBarEcharts();\r\n    }\r\n    componentWillUpdate(){\r\n\r\n    }\r\n    componentDidUpdate(){\r\n        this.initBarEcharts();\r\n    }\r\n    increment = () => {\r\n      const getUrl = 'http://127.0.0.1:8000/formats/'\r\n      fetch(getUrl)\r\n      .then(response => {\r\n        console.log(response.json)\r\n        // Convert the response to JSON\r\n        const a = response.json()\r\n        return  a\r\n      })\r\n      .then(data => {\r\n        const xdata = []\r\n        const ydata = []\r\n        if (data.length > 99) {\r\n          for (let i = 0; i < 99; i++ ) {\r\n            xdata.push(data[i].Year)\r\n            ydata.push(data[i].Temp)\r\n          }\r\n        }\r\n        xdata.reverse()\r\n        ydata.reverse()\r\n        console.log('%c HTTP GET Response:', 'color: #f542e6')\r\n        console.log(data)\r\n        console.log(xdata)\r\n        console.log(ydata)\r\n        this.setState({\r\n        data: xdata,\r\n        seriesData: ydata,\r\n    })\r\n      })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n              <button style={{color: \"#ff0000\"}} className=\"mybuttoncolor\" onClick={this.increment}>get data</button>\r\n              <div id=\"main\" style={{ width: 800, height: 600 }}></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}